# Generated by Django 5.2 on 2025-10-11 19:29

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth_app", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="CameraLocation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("latitude", models.DecimalField(decimal_places=6, max_digits=9)),
                ("longitude", models.DecimalField(decimal_places=6, max_digits=9)),
                ("address", models.TextField()),
                ("isActive", models.BooleanField(db_column="isActive", default=True)),
                ("installationDate", models.DateField(db_column="installationDate")),
                (
                    "createdAt",
                    models.DateTimeField(auto_now_add=True, db_column="createdAt"),
                ),
            ],
            options={
                "db_table": "plates_camera_locations",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PlateAlertRule",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                (
                    "platePattern",
                    models.CharField(
                        db_column="platePattern",
                        help_text="Regex pattern for plates",
                        max_length=50,
                    ),
                ),
                (
                    "alertType",
                    models.CharField(
                        choices=[
                            ("STOLEN", "Stolen Vehicle"),
                            ("WANTED", "Wanted Person"),
                            ("VIP", "VIP Vehicle"),
                            ("BLACKLIST", "Blacklisted"),
                        ],
                        db_column="alertType",
                        max_length=20,
                    ),
                ),
                ("isActive", models.BooleanField(db_column="isActive", default=True)),
                (
                    "createdAt",
                    models.DateTimeField(auto_now_add=True, db_column="createdAt"),
                ),
                (
                    "createdBy",
                    models.ForeignKey(
                        db_column="createdBy",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="auth_app.user",
                    ),
                ),
            ],
            options={
                "db_table": "plates_alert_rules",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PlateDetection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="createdAt",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(
                        auto_now=True, db_column="updatedAt", verbose_name="Updated At"
                    ),
                ),
                (
                    "isActive",
                    models.BooleanField(
                        db_column="isActive", default=True, verbose_name="Is Active"
                    ),
                ),
                ("vehicleId", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("plateNumber", models.CharField(max_length=255)),
                ("country", models.CharField(max_length=255)),
                ("confidence", models.IntegerField()),
                ("bestFrameId", models.IntegerField()),
                ("isValidated", models.BooleanField(default=False)),
                ("validatedAt", models.DateTimeField(blank=True, null=True)),
                (
                    "validationSource",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "validationData",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                (
                    "vehicleBrand",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "vehicleModel",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("vehicleYear", models.IntegerField(blank=True, null=True)),
                (
                    "vehicleColor",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("ownerName", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "registrationStatus",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("hasAlerts", models.BooleanField(default=False)),
                ("processedAt", models.DateTimeField()),
                ("notes", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "processed_by",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_plates",
                        to="auth_app.user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Plate Detection",
                "verbose_name_plural": "Plate Detections",
                "db_table": "plates_detections",
                "ordering": ["-createdAt"],
            },
        ),
        migrations.CreateModel(
            name="PlateAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="createdAt",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(
                        auto_now=True, db_column="updatedAt", verbose_name="Updated At"
                    ),
                ),
                (
                    "isActive",
                    models.BooleanField(
                        db_column="isActive", default=True, verbose_name="Is Active"
                    ),
                ),
                ("licensePlateId", models.IntegerField()),
                (
                    "alertType",
                    models.CharField(
                        choices=[
                            ("STOLEN", "Stolen"),
                            ("WANTED", "Wanted"),
                            ("EXPIRED", "Expired"),
                            ("VIOLATION", "Violation"),
                            ("OTHER", "Other"),
                        ],
                        max_length=30,
                    ),
                ),
                ("severity", models.IntegerField()),
                ("title", models.CharField(max_length=255)),
                ("description", models.CharField(max_length=255)),
                ("source", models.CharField(max_length=255)),
                (
                    "externalReferenceId",
                    models.UUIDField(default=uuid.uuid4, editable=False),
                ),
                ("reportDate", models.DateTimeField(blank=True, null=True)),
                ("reportedBy", models.CharField(blank=True, max_length=255, null=True)),
                ("resolvedAt", models.DateTimeField(blank=True, null=True)),
                (
                    "resolutionNotes",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("wasNotified", models.BooleanField(default=False)),
                ("notifiedAt", models.DateTimeField(blank=True, null=True)),
                ("notifiedTo", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "notificationMethod",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("requiresAction", models.BooleanField(default=False)),
                (
                    "actionTaken",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "actionTakenBy",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("actionTakenAt", models.DateTimeField(blank=True, null=True)),
                (
                    "detection",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analyses",
                        to="plates_app.platedetection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Plate Analysis",
                "verbose_name_plural": "Plate Analyses",
                "db_table": "plates_analyses",
                "ordering": ["-createdAt"],
            },
        ),
        migrations.CreateModel(
            name="VehicleDetection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="createdAt",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(
                        auto_now=True, db_column="updatedAt", verbose_name="Updated At"
                    ),
                ),
                (
                    "isActive",
                    models.BooleanField(
                        db_column="isActive", default=True, verbose_name="Is Active"
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("CAR", "Car"),
                            ("TRUCK", "Truck"),
                            ("MOTORCYCLE", "Motorcycle"),
                            ("BUS", "Bus"),
                            ("BICYCLE", "Bicycle"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("confidence", models.IntegerField()),
                (
                    "boundingBox",
                    models.JSONField(
                        default=dict, help_text="Reference to BoundingBox interface"
                    ),
                ),
                ("speed", models.IntegerField(blank=True, null=True)),
                ("timestamp", models.DateTimeField()),
                (
                    "related_plate",
                    models.OneToOneField(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vehicle",
                        to="plates_app.platedetection",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vehicle Detection",
                "verbose_name_plural": "Vehicle Detections",
                "db_table": "plates_vehicles",
                "ordering": ["-createdAt"],
            },
        ),
        migrations.AddIndex(
            model_name="platedetection",
            index=models.Index(
                fields=["plateNumber"], name="plates_dete_plateNu_c0790a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="platedetection",
            index=models.Index(
                fields=["confidence"], name="plates_dete_confide_d48a0c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="platedetection",
            index=models.Index(
                fields=["createdAt"], name="plates_dete_created_9e67bf_idx"
            ),
        ),
    ]
