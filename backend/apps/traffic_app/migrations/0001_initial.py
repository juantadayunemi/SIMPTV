# Generated by Django 5.2 on 2025-10-09 20:50

import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Camera",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="createdAt",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(
                        auto_now=True, db_column="updatedAt", verbose_name="Updated At"
                    ),
                ),
                (
                    "isActive",
                    models.BooleanField(
                        db_column="isActive", default=True, verbose_name="Is Active"
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("brand", models.CharField(blank=True, max_length=255, null=True)),
                ("model", models.CharField(blank=True, max_length=255, null=True)),
                ("resolution", models.CharField(blank=True, max_length=255, null=True)),
                ("fps", models.FloatField(blank=True, default=0, null=True)),
                ("locationId", models.FloatField()),
                ("currentLocationId", models.FloatField(blank=True, null=True)),
                ("isMobile", models.BooleanField(default=False)),
                ("lanes", models.FloatField(default=0)),
                ("coversBothDirections", models.BooleanField(default=False)),
                ("notes", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "verbose_name": "Camera",
                "verbose_name_plural": "Cameras",
                "db_table": "traffic_cameras",
                "ordering": ["-createdAt"],
            },
        ),
        migrations.CreateModel(
            name="Location",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="createdAt",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(
                        auto_now=True, db_column="updatedAt", verbose_name="Updated At"
                    ),
                ),
                (
                    "isActive",
                    models.BooleanField(
                        db_column="isActive", default=True, verbose_name="Is Active"
                    ),
                ),
                ("description", models.CharField(max_length=255)),
                ("latitude", models.FloatField(default=0)),
                ("longitude", models.FloatField(default=0)),
                ("city", models.CharField(blank=True, max_length=255, null=True)),
                ("province", models.CharField(blank=True, max_length=255, null=True)),
                ("country", models.CharField(max_length=255)),
                ("notes", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "verbose_name": "Location",
                "verbose_name_plural": "Locations",
                "db_table": "traffic_locations",
                "ordering": ["-createdAt"],
            },
        ),
        migrations.CreateModel(
            name="TrafficAnalysis",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="createdAt",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(
                        auto_now=True, db_column="updatedAt", verbose_name="Updated At"
                    ),
                ),
                (
                    "isActive",
                    models.BooleanField(
                        db_column="isActive", default=True, verbose_name="Is Active"
                    ),
                ),
                ("cameraId", models.FloatField()),
                ("locationId", models.FloatField()),
                (
                    "videoPath",
                    models.UUIDField(
                        blank=True, default=uuid.uuid4, editable=False, null=True
                    ),
                ),
                ("userId", models.FloatField(blank=True, null=True)),
                ("startedAt", models.DateTimeField()),
                ("endedAt", models.DateTimeField(blank=True, null=True)),
                ("duration", models.FloatField(blank=True, default=0, null=True)),
                ("totalVehicleCount", models.FloatField(default=0)),
                ("avgSpeed", models.FloatField(blank=True, default=0, null=True)),
                (
                    "densityLevel",
                    models.CharField(
                        choices=[
                            ("LOW", "Low"),
                            ("MEDIUM", "Medium"),
                            ("HIGH", "High"),
                            ("HEAVY", "Heavy"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "weatherConditions",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "analysisData",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("CANCELLED", "Cancelled"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "errorMessage",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("carCount", models.FloatField(default=0)),
                ("truckCount", models.FloatField(default=0)),
                ("motorcycleCount", models.FloatField(default=0)),
                ("busCount", models.FloatField(default=0)),
                ("bicycleCount", models.FloatField(default=0)),
                ("otherCount", models.FloatField(default=0)),
            ],
            options={
                "verbose_name": "Traffic Analysis",
                "verbose_name_plural": "Traffic Analyses",
                "db_table": "traffic_analyses",
                "ordering": ["-startedAt"],
            },
        ),
        migrations.CreateModel(
            name="Vehicle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="createdAt",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(
                        auto_now=True, db_column="updatedAt", verbose_name="Updated At"
                    ),
                ),
                (
                    "isActive",
                    models.BooleanField(
                        db_column="isActive", default=True, verbose_name="Is Active"
                    ),
                ),
                ("trafficAnalysisId", models.FloatField()),
                (
                    "vehicleType",
                    models.CharField(
                        choices=[
                            ("CAR", "Car"),
                            ("TRUCK", "Truck"),
                            ("MOTORCYCLE", "Motorcycle"),
                            ("BUS", "Bus"),
                            ("BICYCLE", "Bicycle"),
                            ("OTHER", "Other"),
                        ],
                        max_length=20,
                    ),
                ),
                ("confidence", models.FloatField()),
                ("firstDetectedAt", models.DateTimeField()),
                ("lastDetectedAt", models.DateTimeField()),
                (
                    "trackingStatus",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("EXITED", "Exited"),
                            ("LOST", "Lost"),
                        ],
                        max_length=20,
                    ),
                ),
                ("avgSpeed", models.FloatField(blank=True, default=0, null=True)),
                (
                    "direction",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("NORTH", "North"),
                            ("SOUTH", "South"),
                            ("EAST", "East"),
                            ("WEST", "West"),
                            ("NORTHEAST", "Northeast"),
                            ("NORTHWEST", "Northwest"),
                            ("SOUTHEAST", "Southeast"),
                            ("SOUTHWEST", "Southwest"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("lane", models.FloatField(blank=True, default=0, null=True)),
                ("totalFrames", models.FloatField(default=0)),
                ("storedFrames", models.FloatField(default=0)),
                ("color", models.CharField(blank=True, max_length=255, null=True)),
                ("brand", models.CharField(blank=True, max_length=255, null=True)),
                ("model", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "plateProcessingStatus",
                    models.CharField(
                        choices=[
                            ("PENDING", "Pending"),
                            ("PROCESSING", "Processing"),
                            ("DETECTED", "Detected"),
                            ("NOT_DETECTED", "Not Detected"),
                            ("FAILED", "Failed"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "bestFrameForPlate",
                    models.FloatField(blank=True, default=0, null=True),
                ),
            ],
            options={
                "verbose_name": "Vehicle",
                "verbose_name_plural": "Vehicles",
                "db_table": "traffic_vehicles",
                "ordering": ["-firstDetectedAt"],
            },
        ),
        migrations.CreateModel(
            name="VehicleFrame",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        editable=False, primary_key=True, serialize=False
                    ),
                ),
                (
                    "createdAt",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_column="createdAt",
                        verbose_name="Created At",
                    ),
                ),
                (
                    "updatedAt",
                    models.DateTimeField(
                        auto_now=True, db_column="updatedAt", verbose_name="Updated At"
                    ),
                ),
                (
                    "isActive",
                    models.BooleanField(
                        db_column="isActive", default=True, verbose_name="Is Active"
                    ),
                ),
                ("vehicleId", models.UUIDField(default=uuid.uuid4, editable=False)),
                ("frameNumber", models.FloatField(default=0)),
                ("timestamp", models.DateTimeField()),
                ("boundingBoxX", models.FloatField(default=0)),
                ("boundingBoxY", models.FloatField(default=0)),
                ("boundingBoxWidth", models.FloatField()),
                ("boundingBoxHeight", models.FloatField(default=0)),
                ("confidence", models.FloatField()),
                ("frameQuality", models.FloatField(default=0)),
                ("speed", models.FloatField(blank=True, default=0, null=True)),
                ("imagePath", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "verbose_name": "Vehicle Frame",
                "verbose_name_plural": "Vehicle Frames",
                "db_table": "traffic_vehicle_frames",
                "ordering": ["frameNumber"],
            },
        ),
    ]
