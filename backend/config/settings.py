"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.
Configured for Urbia project with SQL Server and DRF.
"""

from pathlib import Path
import os
from decouple import config
from django.core.exceptions import ImproperlyConfigured
import sys

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add apps directory to Python path
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    default="django-insecure-p08#hw$-d%ufc!j5139jqlu)o_mv_3-*c06l%r)0v!-a-s@tj^",
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=True, cast=bool)

ALLOWED_HOSTS = config(
    "ALLOWED_HOSTS",
    default="127.0.0.1,localhost",
    cast=lambda v: [s.strip() for s in v.split(",")],
)


# Application definition

DJANGO_APPS = [
    "daphne",  # Debe ir PRIMERO para que runserver use ASGI
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    # Django REST Framework
    "rest_framework",
    "rest_framework_simplejwt",
    # CORS
    "corsheaders",
    # Development tools
    "django_extensions",
    "debug_toolbar",
    # API Documentation
    "drf_spectacular",
    # Async Processing
    "django_celery_results",
    # WebSocket
    "channels",
]

LOCAL_APPS = [
    # Core apps
    "apps.entities",  # DLL models (abstract)
    "apps.auth_app",  # Auth API (concrete)
    "apps.traffic_app",  # Traffic Analysis API
    "apps.plates_app",  # Plates API
    "apps.predictions_app",  # Traffic Predictions & ML
    # "apps.external_apis",  # External APIs
    # "apps.notifications",  # Notifications
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",  # ✅ REACTIVADO
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Use SQLite for development if SQL Server connection fails
USE_SQLITE = config("USE_SQLITE", default=False, cast=bool)  # Usamos SQL Server

if USE_SQLITE:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }
else:
    DATABASES = {
        "default": {
            "ENGINE": "mssql",  # Correcto: usa mssql-django
            "NAME": config("DB_NAME", default="UrbiaDb"),
            "USER": config("DB_USER", default="sa"),
            "PASSWORD": config("DB_PASSWORD", default="123456789"),
            "HOST": config("DB_HOST", default="."),
            "PORT": config("DB_PORT", default="1433"),
            "OPTIONS": {
                "driver": "ODBC Driver 17 for SQL Server",
                "extra_params": "TrustServerCertificate=yes;",
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "es-es"
TIME_ZONE = "America/Mexico_City"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ==============================================================================
# DJANGO REST FRAMEWORK
# ==============================================================================

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # ✅ REACTIVADO
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.AllowAny",  # ← AllowAny por defecto permite acceso sin token válido
    ],
    "DEFAULT_RENDERER_CLASSES": [
        "rest_framework.renderers.JSONRenderer",  # ✅ JSON estándar (sin conversión)
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 20,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

# ==============================================================================
# JWT CONFIGURATION
# ==============================================================================

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(
        hours=24
    ),  # 24 horas para no estar logueando constantemente
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": False,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,
    "AUDIENCE": None,
    "ISSUER": None,
    "JWK_URL": None,
    "LEEWAY": 0,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
    "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
    "TOKEN_TYPE_CLAIM": "token_type",
    "TOKEN_USER_CLASS": "rest_framework_simplejwt.models.TokenUser",
    "JTI_CLAIM": "jti",
    "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
    "SLIDING_TOKEN_LIFETIME": timedelta(minutes=60),
    "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(days=1),
}

# ==============================================================================
# CORS CONFIGURATION
# ==============================================================================

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React dev server
    "http://127.0.0.1:3000",
    "http://localhost:8080",  # Vue/Angular
    "http://127.0.0.1:8080",
    "http://localhost:5173",  # Vite dev server
    "http://127.0.0.1:5173",
    "http://localhost:5174",  # Vite dev server (alternate port)
    "http://127.0.0.1:5174",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# ==============================================================================
# API DOCUMENTATION (drf-spectacular)
# ==============================================================================

SPECTACULAR_SETTINGS = {
    "TITLE": "Urbia API",
    "DESCRIPTION": "RESTful API for Urbia application with automatic entity generation",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    "COMPONENT_SPLIT_REQUEST": True,
}

# ==============================================================================
# DEBUG TOOLBAR CONFIGURATION
# ==============================================================================

INTERNAL_IPS = [
    "127.0.0.1",
    "localhost",
]

# ==============================================================================
# SECURITY SETTINGS
# ==============================================================================

# CSRF Settings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# Session settings
SESSION_COOKIE_AGE = 86400  # 24 hours
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = "Lax"

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
        "entities.generator": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

# ==============================================================================
# EMAIL CONFIGURATION (Gmail SMTP)
# ==============================================================================

EMAIL_BACKEND = config(
    "EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend"
)
EMAIL_HOST = config("EMAIL_HOST", default="smtp.gmail.com")
EMAIL_PORT = config("EMAIL_PORT", default=587, cast=int)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default="")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default="")
EMAIL_FROM = config("EMAIL_FROM", default="TrafiSmart <noreply@trafismart.com>")

# ==============================================================================
# CELERY CONFIGURATION (Async Task Processing)
# ==============================================================================

CELERY_BROKER_URL = config("CELERY_BROKER_URL", default="redis://localhost:6379/0")
CELERY_RESULT_BACKEND = config(
    "CELERY_RESULT_BACKEND", default="redis://localhost:6379/0"
)
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes max per task

# ==============================================================================
# CHANNELS CONFIGURATION (WebSocket)
# ==============================================================================

ASGI_APPLICATION = "config.asgi.application"

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
        # Usa memoria del proceso en lugar de Redis
        # Perfecto para desarrollo y funciona igual de bien
        # Solo limitación: no funciona con múltiples workers (pero no los necesitas)
    },
}

# ==============================================================================
# VIDEO PROCESSING CONFIGURATION
# ==============================================================================

# Max video file size: 2GB
MAX_VIDEO_SIZE = 2 * 1024 * 1024 * 1024  # 2GB in bytes

# Supported video formats
SUPPORTED_VIDEO_FORMATS = [".mp4", ".avi", ".mov", ".mkv", ".flv", ".wmv"]

# YOLO Model Configuration
YOLO_MODEL_PATH = BASE_DIR / "models" / "yolov8n.pt"  # Nano model (fast)
YOLO_CONFIDENCE_THRESHOLD = 0.5  # Minimum confidence for detection
YOLO_IOU_THRESHOLD = 0.45  # IoU threshold for NMS

# Vehicle Re-identification Configuration
REIDENTIFICATION_TIME_WINDOW = 60  # seconds (1 minute)

# Frame Storage Configuration
FRAMES_PER_VEHICLE = 8  # Best 8 frames per vehicle
FRAME_QUALITY_THRESHOLD = 0.6  # Minimum quality to save frame

# OCR Configuration
OCR_LANGUAGES = ["en", "es"]  # English and Spanish
OCR_GPU = config("OCR_GPU", default=False, cast=bool)  # Use GPU if available

# Video Streaming Configuration
STREAM_RECONNECT_ATTEMPTS = 3
STREAM_TIMEOUT = 10  # seconds

# Frontend URL for email links
FRONTEND_URL = config("FRONTEND_URL", default="http://localhost:5173")
