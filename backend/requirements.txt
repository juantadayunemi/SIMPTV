# ============================================================================
# TRAFISMART - Backend Requirements
# Python 3.13 Compatible
# ============================================================================
# NOTA: Para instalación de producción, usar requirements_production.txt
# Este archivo usa versiones flexibles para desarrollo
# ============================================================================

# Core Django and Database
Django==5.2
mssql-django==1.6
pyodbc==5.2.0

# Django REST Framework
djangorestframework==3.15.2
djangorestframework-simplejwt==5.3.0

# Configuration and Security
python-decouple==3.8
django-cors-headers==4.4.0
setuptools>=65.0  # For pkg_resources compatibility

# Development Tools
django-debug-toolbar==4.3.0
django-extensions==3.2.3
werkzeug==3.0.1  # Enhanced auto-reload and debugger for runserver_plus
# watchdog==4.0.0  # Commented: Not compatible with Python 3.13 yet (use runserver instead)

# API Documentation
drf-spectacular==0.27.1

# Email
django-mail-templated==2.6.5
dnspython==2.6.1  # For email domain validation (MX records)

# ============================================================================
# ARQUITECTURA DE IA - YOLOv4-Tiny + HaarCascade + PaddleOCR
# ============================================================================
# Arquitectura según diagrama de flujo:
# 1. YOLOv4-Tiny: Detección de vehículos (150-250 FPS, 80 clases COCO)
# 2. ROI vehiculo/placa: Recorte de región detectada (bounding boxes)
# 3. HaarCascade: Detección de placas dentro del ROI del vehículo
# 4. Preprocesamiento: Escala de grises, binarización, mejora de contraste
# 5. PaddleOCR: Reconocimiento de texto en placa preprocesada
# 
# Resultado final: Tipo de vehículo + Texto de placa
# ============================================================================

# Video Processing & Computer Vision
opencv-python==4.10.0.84  # OpenCV core (YOLOv4-Tiny + HaarCascade)
opencv-contrib-python==4.10.0.84  # OpenCV extras (CUDA support, DNN optimizations)
numpy>=1.21.6,<2.0.0  # Numerical operations (compatible con PaddleOCR)

# OCR para placas vehiculares
paddleocr==2.8.1  # PaddleOCR - Reconocimiento de texto (más rápido que Tesseract)
paddlepaddle==3.0.0  # PaddlePaddle framework (CPU optimizado)
shapely==2.0.6  # Geometría de polígonos (requerido por PaddleOCR)
pillow==10.4.0  # Image processing (preprocesamiento de placas)

# ============================================================================
# MODELOS DESCARGADOS CON:
# ============================================================================
# YOLOv4-Tiny:  python models/download_yolov4_tiny.py
# HaarCascade:  python models/download_haarcascade.py
# PaddleOCR:    Se descarga automáticamente al primer uso
# ============================================================================

# ============================================================================
# ELIMINADAS: Dependencias YOLOv8/ONNX/Roboflow/PyTorch
# ============================================================================
# ANTES: ultralytics, onnxruntime, torch, torchvision, roboflow
#        Total: ~2.5 GB de dependencias, 80-100 FPS
# 
# AHORA: Solo OpenCV + YOLOv4-Tiny nativo
#        Total: ~200 MB de dependencias, 150-250 FPS
# 
# VENTAJAS:
# ✅ -2.3 GB espacio en disco
# ✅ +50-150 FPS más rápido (2x velocidad)
# ✅ Más estable (sin conversiones ONNX)
# ✅ GPU CUDA nativo en OpenCV DNN (sin librerías extra)
# ✅ Mismo número de clases (80 COCO)
# ============================================================================

# Video Tracking
filterpy==1.4.5  # Kalman filter for tracking (SORT tracker)
scipy==1.14.1  # Scientific computing
scikit-learn==1.5.2  # Machine learning utilities

# Async Processing
celery==5.4.0  # Background task processing
redis==5.2.0  # Message broker for Celery
django-celery-results==2.5.1  # Store Celery results in DB

# WebSocket for Real-time Updates
channels==4.2.0  # WebSocket support for Django
channels-redis==4.2.1  # Redis channel layer
daphne==4.1.2  # ASGI server

# Video Streaming
imageio==2.36.0  # Read/write images and videos
imageio-ffmpeg==0.5.1  # FFmpeg wrapper for video processing

# Testing
pytest==8.1.1
pytest-django==4.8.0

# Code Quality
black==24.3.0
flake8==7.0.0
ruff==0.3.4